# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "development" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-west1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: techacc-cluster-01    # TODO: update to cluster name
  GKE_ZONE: us-west1-a   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: drive # TODO: update to Artifact Registry docker repository
  IMAGE: drive-frontend

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main     # Force to latest commit on main branch

    # Configure Access Token
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GAR_USER }}'
        token_format: 'access_token'

    - id: 'secrets'
      uses: 'google-github-actions/get-secretmanager-secrets@v1'
      with:
        secrets: |-
          glabs-jira-token:${{ env.PROJECT_ID }}/glabs-jira-token
          glabs-gc-oauth-client-id:${{ env.PROJECT_ID }}/glabs-gc-oauth-client-id
          glabs-google-analytics:${{ env.PROJECT_ID }}/glabs-google-analytics

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin "https://$GAR_LOCATION-docker.pkg.dev"
    # Get the GKE credentials so we can deploy to the cluster 
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GAR_LOCATION }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:development" \
          --file ./Dockerfile \
          .

    # Publish
    - name: Publish 
      run: |- 
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:development"

    # Namespace
    - name: Namespace
      run: |-
        if ! kubectl get namespaces drive; then
          echo "Namespace drive does not exist. Creating it.."
          kubectl create namespace drive
        else
          echo "Namespace drive already exists. Will use it."
        fi
      
    # Create Pull Secret
    - name: Secret
      run: |-
        if ! kubectl get secret pullsecret -n drive; then
          echo "Creating Kubernetes Secret for the Pullsecret"
          echo ${{ secrets.GAR_USER }}>> "./key.json"
          kubectl create secret docker-registry pullsecret -n drive --docker-server=$GAR_LOCATION-docker.pkg.dev --docker-username=_json_key --docker-password="$(cat ./key.json)" --docker-email=gtsadmin@genesys.com
        else
          echo "Pullsecret already exists. Will use it."
        fi

    # Create Certificate Secret
    - name: Cert
      run: |-
        if ! kubectl get secret wildcard-demo-genesys-com-2022 -n drive; then
          echo "Creating Kubernetes Secret for the TLS Certificate"
          kubectl get secret wildcard-demo-genesys-com-2022 --namespace=default -o yaml | sed 's/namespace: .*/namespace: drive/' | kubectl apply -f -
        else
          echo "Certificate Secret already exists. Will use it."
        fi
 
    # Create Env Variables from Kubernetes Secrets
    - name: Env Secrets
      run: |-
        echo "Creating Kubernetes Secret for the glabs frontend"
        sed -i "s|INSERT_VITE_JIRA_TOKEN|${{ steps.secrets.outputs.glabs-jira-token }}|g" ".env"
        sed -i "s|INSERT_OAUTH_ID|${{ steps.secrets.outputs.glabs-gc-oauth-client-id }}|g" ".env"
        sed -i "s|INSERT_ANALYTICS_ID|${{ steps.secrets.outputs.glabs-google-analytics }}|g" ".env"

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl apply -f ./drive-k8s.yml
    
    # Re-Deploy for clean image
    - name: Restart
      run: |-
        kubectl rollout restart deployment/drive-frontend -n drive