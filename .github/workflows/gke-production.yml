name: Drive-Frontend GKE Production

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_GH_USER: ${{ secrets.GCP_GH_USER }}
  GCP_LOCATION: us-west1
  GKE_CLUSTER: techacc-cluster-01
  GKE_ZONE: us-west1-a
  GKE_NAMESPACE: drive
  GKE_DEPLOYMENT: drive
  REPOSITORY: drive
  IMAGE: drive-frontend

jobs:
  setup-build-publish-deploy:
    name: Drive-Frontend GKE Productioin
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main

    # Node Snyk Workflow
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Configure Access Token
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ env.GCP_GH_USER }}'
        token_format: 'access_token'

    - id: 'secrets'
      uses: 'google-github-actions/get-secretmanager-secrets@v1'
      with:
        secrets: |-
          glabs-jira-token:${{ env.PROJECT_ID }}/glabs-jira-token
          glabs-gc-oauth-client-id:${{ env.PROJECT_ID }}/glabs-gc-oauth-client-id
          glabs-google-analytics:${{ env.PROJECT_ID }}/glabs-google-analytics
          gke-pullsecret:${{ env.PROJECT_ID }}/gcp-gh-user-secret

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin "https://$GCP_LOCATION-docker.pkg.dev"
    # Get the GKE credentials so we can deploy to the cluster 
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GCP_LOCATION }}

    # Create Env Variables from Kubernetes Secrets
    - name: Env Secrets
      run: |-
        echo "Creating Kubernetes Secret for the glabs frontend"
        sed -i "s|https://glabsdev.onmicrosoft.com/drive-dev-api/drive.customers.read|https://glabsdev.onmicrosoft.com/drive-api/drive.customers.read|g" "./src/plugins/msal/msalConfig.ts"
        sed -i "s|INSERT_VITE_JIRA_TOKEN|${{ steps.secrets.outputs.glabs-jira-token }}|g" ".env.gke-production"
        sed -i "s|INSERT_OAUTH_ID|${{ steps.secrets.outputs.glabs-gc-oauth-client-id }}|g" ".env.gke-production"
        sed -i "s|INSERT_ANALYTICS_ID|${{ steps.secrets.outputs.glabs-google-analytics }}|g" ".env.gke-production"
        cat ".env.gke-production"

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GCP_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
          --file ./Dockerfile-production \
          .

    # Publish
    - name: Publish 
      run: |- 
        docker push "$GCP_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

    # Namespace
    - name: Namespace
      run: |-
        if ! kubectl get namespaces ${{ env.GKE_NAMESPACE }}; then
          echo "Namespace ${{ env.GKE_NAMESPACE }} does not exist. Creating it.."
          kubectl create namespace ${{ env.GKE_NAMESPACE }}
        else
          echo "Namespace ${{ secrets.GKE_NAMESPACE }} already exists. Will use it."
        fi
      
    # Create Pull Secret
    - name: Secret
      run: |-
        if ! kubectl get secret pullsecret -n $GKE_NAMESPACE; then
          echo "Creating Kubernetes Secret for the Pullsecret"
          echo ${{ steps.secrets.outputs.gke-pullsecret }} | base64 -d >> "./key.json"
          kubectl create secret docker-registry pullsecret -n $GKE_NAMESPACE --docker-server=$GCP_LOCATION-docker.pkg.dev --docker-username=_json_key --docker-password="$(cat ./key.json)" --docker-email=gtsadmin@genesys.com
        else
          echo "Pullsecret already exists. Will use it."
        fi

    # Create Certificate Secret
    - name: Cert
      run: |-
        if ! kubectl get secret cert-drive-dev-wildcard-2023 -n drive; then
          echo "Creating Kubernetes Secret for the TLS Certificate"
          kubectl get secret cert-drive-dev-wildcard-2023 --namespace=default -o yaml | sed 's/namespace: .*/namespace: drive/' | kubectl apply -f -
        else
          echo "Certificate Secret already exists. Will use it."
        fi

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl apply -f ./gke-production.yml
    
    # Re-Deploy for clean image
    - name: Restart
      run: |-
        kubectl rollout restart deployment/drive-frontend -n $GKE_NAMESPACE